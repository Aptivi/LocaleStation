//
// LocaleStation  Copyright (C) 2025  Aptivi
//
// This file is part of LocaleStation
//
// LocaleStation is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LocaleStation is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY, without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

using System;
using System.Collections.Generic;
using System.Globalization;

namespace LocaleStation.Tools
{
    /// <summary>
    /// Language common tools
    /// </summary>
    public static class LanguageCommon
    {
        private static readonly Dictionary<string, LanguageLocalActions> localActions = [];
        private static string language = "eng";

        /// <summary>
        /// Language to use
        /// </summary>
        public static string Language
        {
            get => language;
            set => language = value;
        }

        /// <summary>
        /// List of local actions
        /// </summary>
        public static string[] Actions =>
            [.. localActions.Keys];

        /// <summary>
        /// Inferred language according to the current UI culture
        /// </summary>
        /// <param name="localAction">Localization action</param>
        public static string GetInferredLanguage(string localAction = "") =>
            GetInferredLanguages(localAction)[0];

        /// <summary>
        /// Inferred languages according to the current UI culture
        /// </summary>
        /// <param name="localAction">Localization action</param>
        public static string[] GetInferredLanguages(string localAction = "")
        {
            var currentCulture = CultureInfo.CurrentUICulture;
            string cultureName = currentCulture.Name;
            var langAction = GetAction(localAction);
            var cultLangs = langAction.ListLanguagesCulture.Invoke(cultureName);

            // Usually only one
            if (cultLangs.Length > 0)
                return cultLangs;
            return ["eng"];
        }

        /// <summary>
        /// Translates the string using a specified localization ID
        /// </summary>
        /// <param name="locId">Localization ID</param>
        /// <returns>Translated string</returns>
        public static string Translate(string locId) =>
            Translate(locId, "Terminaux", Language);

        /// <summary>
        /// Translates the string using a specified localization ID
        /// </summary>
        /// <param name="locId">Localization ID</param>
        /// <param name="action">Local action</param>
        /// <returns>Translated string</returns>
        public static string Translate(string locId, string action) =>
            Translate(locId, action, Language);

        /// <summary>
        /// Translates the string using a specified localization ID
        /// </summary>
        /// <param name="locId">Localization ID</param>
        /// <param name="action">Local action</param>
        /// <param name="language">Language to use</param>
        /// <returns>Translated string</returns>
        public static string Translate(string locId, string action, string language)
        {
            var langAction = GetAction(action);
            var translated = langAction.Translate.Invoke(locId, language);
            return translated;
        }

        /// <summary>
        /// Is the custom action defined?
        /// </summary>
        /// <param name="name">Name of the action</param>
        /// <returns>True if defined; false otherwise</returns>
        public static bool IsCustomActionDefined(string name) =>
            localActions.ContainsKey(name);

        /// <summary>
        /// Adds an action for language translation
        /// </summary>
        /// <param name="name">Name of the action</param>
        /// <param name="action">Action that contains localized strings generated by Localizer</param>
        /// <exception cref="Exception"></exception>
        public static void AddCustomAction(string name, LanguageLocalActions action)
        {
            if (IsCustomActionDefined(name))
                throw new Exception(string.Format(Localized.LocalStrings.Translate("LS_TOOLS_EXCEPTION_ACTIONFOUND", Language), name));
            localActions.Add(name, action);
        }

        /// <summary>
        /// Removes an action for language translation
        /// </summary>
        /// <param name="name">Name of the action</param>
        /// <exception cref="Exception"></exception>
        public static void RemoveCustomAction(string name)
        {
            if (!IsCustomActionDefined(name))
                throw new Exception(string.Format(Localized.LocalStrings.Translate("LS_TOOLS_EXCEPTION_ACTIONNOTFOUND", Language), name));
            localActions.Remove(name);
        }

        /// <summary>
        /// Gets the language action
        /// </summary>
        /// <param name="name">Name of the action</param>
        /// <returns>A <see cref="LanguageLocalActions"/> instance</returns>
        /// <exception cref="Exception"></exception>
        public static LanguageLocalActions GetAction(string name)
        {
            if (!localActions.TryGetValue(name, out var action))
                throw new Exception(string.Format(Localized.LocalStrings.Translate("LS_TOOLS_EXCEPTION_ACTIONNOTFOUND", Language), name));
            return action;
        }
    }
}
